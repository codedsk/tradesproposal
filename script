Slide 1 - Title Slide

Hello and welcome to the demo of HUBzero capabilities for the TRADES program.
My name is Derrick Kearney and I work for HUBzero.org,



Slide 2 - Image of HUBzero Platform showing web browser, website, db, execution hosts, grid resources.

a platform that enables developers and researchers to work collaboratively to perform research and build software in secure, scalable, sharable desktop-like environments.

In order to explore some of the prominent features of the HUB in our short time together, we will take a look at a faily popular application named CNTbands, and explore the experience of the researchers who built it and the users who do research with it on the HUB.



Slide 3 - Image of CNTbands graphical user interface.

CNTbands is an application that was first published on a HUB based web site over 10 years ago and to this day, users continue to use it for research and developers continue to add new features.

On the surface this application looks pretty simple,



Slide 4 - CNTbands with application graph

but under the hood, there is a lot going on. And it came from years of research, developement, collaboration between developers, and interaction with users, and the HUB is in the middle of all of these interactions. If you're a researcher, you're familiar with this story. It's the story of how research happens, and as the name suggests, the HUB is where all of these interactions happen.

Today weâ€™ll be focusing on the development environment that allows users to access shared development tools, grid computing resources, and work collaboratively to perform research.



Slide 5 - story starts in 1990s with MP Anantram

the beginnings of this application started in the early 90s, with a researcher, M.P. Anantram, was studying nanoscale structures and their applications in electrical engineering. He was building models using MATLAB.



Slide 6 - 2002 , Jing Guo picks up the work

In the mid 90s, M.P. Anantram joined NASA where he continued to research and publish papers regarding nanoscale structure.

Fast forward to 2002, a new researcher, Jing Guo was interested in building models for Carbon Nanotubes. So he starts digging up the old work from M.P. Anantram and collecting papers.

As he is building his models, Jing wants to start working more closely with M.P. Anantram, sharing the models, but the de-facto way of sharing is emailing files back and forth, is painful and time consuming for everyone involved.

Instead, Jing starts using the HUB.
The HUB makes collaboration easy.



Slide 7 - 2002 - Tool Registered

Jing registered his application on the HUB and immediately got access to:
1. a source code repsository where he could store versions of his software models and share the source code
2. a wiki area where he could keep notes for other developers
3. a place to publish his tool in the future.
4. access to the HUB workspaces.



Slide 8 - What is a workspace.

I want to take a minute to explain the concept of a workspace.

Researchers are already used to the working on a desktop.

We give them all of the features of a desktop in a persistant environment that stays running, even when they turn their own computer off.  We call this environment a workspace. This isn't just shelling into some terminal, although you can do that too. The HUB Workspaces give you a full graphical interface that lets you run all the tools you can run now on your desktop. Plus, you can download or build other software, if you want.

We pack the workspaces with standard development tools like compilers, debuggers, and interpreters for languages like C, C++, Fortran, and Java. There are also graphical IDEs like RStudio, OCTAVE, and MATLAB. But, because of its nature, any tool with a graphical user interface that runs under Linux and soon Microsoft Windows, can be installed in the workspace and made available for users of the system to access either in the workspace, or as a published application, through their browser.

The workspace also provide access to shared grid computing resources like Open Science Grid and XSEDE.



Slide 9 - Collaboration, Groups

Another thing Jing did was create a Group on the HUB.

This gave him space where he could upload and share the papers, files, project notes and data he was using as a part of his research.

With the group, Jing could invite other developers or people who are interested in his science, and engage with that community on the HUB.



Slide 10 - CNTBands graph, highlight DOS and E(k) paths

After working with members of his research group, and collaborating with others from around the world, Jing was able to put together a first version of his application to model carbon nanotubes. It had a graphical user interface that made it easy to use, and it visualized the output and made comparing of output across many runs simple.

He put all his code in the source code repository and requested his application be installed for others to use.



Slide 11 - Installing Applications.

Once the application was installed, other members of his development team could try out the application and provide him feedback before he released it to the public. The process for them to try the application was as easy as pushing the "launch tool" button. After pushing the button, the application was running inside of their web browser.

They didn't need to download any code, or compile the sources, or deal with compiler errors, or license problems. It just worked. And that's key when it comes to collaborating, you want to reduce the barriers to getting work done. That's what the HUB is all about.



Slide 12 - Publishing Applications.

When everything was working properly, he published the tool for the world to start using.



Slide 13 - knowing your impact

When tools are published on the HUB, they also get a tool information page that the tool author can modify.
This is the web page the world accesses when they want to use the application on the HUB.
At the top, it gives information about the application, its funding and its authors.

It also provides developers a way to know what kind of impact their application is having on the world.



Slide 14 - Track Usage Metrics

Further down the page, in the usage tab, there are additional metrics showing what parts of the world users are coming from, how they identify, whether they come from an educational organization or industry, and also the wall clock or cpu time that the application consumes.



Slide 15 - Communicate with users

On the side of the page, the HUB keeps metrics on
1. how many unique users have run the application,
2. what questions the users are asking about the application and
3. new features the users are requesting.

This type of feedback from users is invaluable and you can't get it from doing the typical stuff like posting your code in a zip file on a website. The HUB provides this for the developers and users automatically. And its part of how the HUB helps build community around science and research, and enables science to happen.

People can request a feature by creating a new wish.
For example, in the case of CNTbands, users may have said that they liked the Density of States and Band Gap plots that were being provided, but they wanted to see what the carbon nanotube they were simulating looked like.



Slide 16 - wish for visualizing the nanotube. CNTBands Graph highlight maketube and molvis output.

The developers can recieve this feedback, adjust their code to add the feature, and quickly install and publish the new version of the application. In this case, they took advantage of the visualization servers available inside the workspace environment, to create an interactive view of the carbon nanotube.



Slide 17 - new developers

Adding new developers to the team and getting them up to speed is equally as easy.
Remember when Jing registered his application on the HUB and created the Group on the HUB?
He also has the ability to add new people to these teams. So as he moves to another job, the research doesn't end or die.
It can contiue to grow.



Slide 18 - share a workspace

Researchers don't need to be in the same place, at the same time, to collaborate.
They can move around, change jobs, and still connect with each other by sharing workspaces.

So when the new researchers have problems, they can start up a workspace, launch their application in the workspace,



Slide 19 - share a workspace

and share the workspace with other researchers to talk about problems they might be facing.



Slide 20 - share a workspace

This means that they can collaborate within the workspace! And that's a powerful feature because its often easier to show someone a problem, than to try to describe it and have them try to reproduce it.



Slide 21 - Productivity in the workspace

There are three more features I want to show you quickly and they all have to do with different ways of running applications within the workspace. They are Submit, Pegasus Workflows, and Uncertainty Quanitification. The first one is Submit.



Slide 22 - Run tools locally

Inside the workspace, users can run programs by using a terminal. The workspaces are pretty powerful by themselves. But sometimes you need more cores or more RAM to run parallel jobs.

Submit allows researchers to easily run their programs on grid computing resources like XSEDE and OpenScience Grid.



Slide 23 - Submit jobs to othe grid

In most cases it is as easy as prepending the word "submit" to your command. This lets the submit program handle sending your job to the supercomputers.



Slide 24 - Submit workflows

If you run a simulation for one value, you probably want to run it for a few other values to see how the result changes.

With the submit command, researchers can perform sweeps of input variables by adding a little syntax to their command. In this example we want to perform our calculation, sweeping the Vin variable from 1-5 volts.

In the background, submit creates something called a workflow, and sends 5 jobs to be run on a supercomputer in parallel.



Slide 25 - Your own workflow

If you want to, you can even build your own workflow within the Workspaces.
Remember that cntbands tool we were talking about earlier?
It was a good candidate for being run as a workflow. When it was originally being developed, the authors didn't envision it would be a workflow. But over time, as more features were added, it evolved into one.
So we built a version of the tool that used a program called Pegasus to manage it as a the workflow. This can be done with any application where the pieces are independent programs in their own right.



Slide 26 - Pegasus Workflow

Speaking of Pegasus, we have it installed inside the workspaces as well.


Slide 27 - Pegasus

Pegasus is a program that enables researchers to build scientific workflows. It is developed by a team out at USC, funded by an NSF grant. We leverage this tool inside the workspace and it makes developing and debugging scientific workflows easy.



Slide 28 UQ

The workspaces also have tools that allow users to do parameter sensitivity analysis, which is useful in all kinds of scientific computation.



Slide 29 UQ
If we consider our inputs to a simulation as having a distribution, then the outputs of our simulation will also have a distibution and we can use those distributions to explore the effects of changing a parameter.

For example, we can see how the properties of a material changes.

Under the hood it uses submit and allows researchers to run hundreds of parallel jobs to help characterize properties of parameters.



Slide 30 - conclusion

conclusion
these are things we already have.
been using it for over 10 years.
doesnt need to be built from scratch.

collaboration
hpc (submit)
data storage
secure, scalable, persistant desktop environments
runs in the cloud (not limited by turning off your laptop).
